{"version":3,"sources":["webpack:///webpack/bootstrap a498075d5f03c3c00b82","webpack:///./lib/chance_quest.js","webpack:///./lib/map.js","webpack:///./lib/territory.js","webpack:///./lib/player.js","webpack:///./lib/game.js","webpack:///./lib/sandbox.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACvDA;AACA;;AAEA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C,gCAAgC,WAAW;AAC3C;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AChmBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,6BAA6B;AACtE,6BAA6B,WAAW,GAAG;AAC3C,uBAAuB,kBAAkB,QAAQ,GAAG;AACpD,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa,IAAI,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,aAAa,IAAI,mBAAmB;AAChE,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AC9IA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,UAAU;AAC1C,gCAAgC,WAAW;AAC3C;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,cAAc,aAAa;AAChD,UAAU,0CAA0C;;AAEpD;AACA;;AAEA;;AAEA;AACA,mBAAmB,gBAAgB,SAAS,8BAA8B;AAC1E;AACA,mBAAmB,gBAAgB,SAAS,8BAA8B;;AAE1E;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB,SAAS;AAC9C,UAAU,sCAAsC;AAChD;;AAEA;AACA;AACA,qBAAqB,gBAAgB,SAAS;AAC9C,UAAU,sCAAsC;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a498075d5f03c3c00b82","const Map = require(\"./map.js\");\nconst Game = require(\"./game.js\");\nconst Sandbox = require(\"./sandbox.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const chanceQuest = new ChanceQuest();\n});\n\nclass ChanceQuest {\n  constructor() {\n    this.bindStart();\n    this.bindTutorial();\n  }\n\n  bindStart() {\n    const start1 = document.getElementById(\"start-1\");\n    start1.addEventListener(\"click\", () => {\n      this.startGame(false, true);\n      document.getElementById(\"main-menu\").classList.add(\"close\");\n    });\n\n    const start2 = document.getElementById(\"start-2\");\n    start2.addEventListener(\"click\", () => {\n      this.startGame();\n      document.getElementById(\"main-menu\").classList.add(\"close\");\n    });\n  }\n\n  bindTutorial() {\n    const tutorial = document.getElementById(\"tutorial\");\n    tutorial.addEventListener(\"click\", () => {\n      this.startGame(1);\n      document.getElementById(\"main-menu\").classList.add(\"close\");\n    });\n  }\n\n  startGame(tutorialMode, computerOn) {\n    this.sandboxStage = new createjs.Stage(\"sandbox-canvas\");\n    this.mapStage = new createjs.Stage(\"map-canvas\");\n    this.gameStage = new createjs.Stage(\"game-canvas\");\n\n    this.sandboxStage.enableMouseOver(20);\n    this.mapStage.enableMouseOver(20);\n    this.gameStage.enableMouseOver(20);\n\n    this.sandbox = new Sandbox(this.sandboxStage);\n    this.map = new Map(this.sandbox, this.mapStage, tutorialMode, computerOn);\n    this.game = new Game(this.map, this.gameStage, tutorialMode, computerOn);\n\n    createjs.Ticker.addEventListener(\"tick\", this.game.handleTick);\n    createjs.Ticker.addEventListener(\"tick\", this.map.handleTick);\n    createjs.Ticker.addEventListener(\"tick\", this.sandbox.handleTick);\n\n    createjs.Ticker.framerate = 5;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/chance_quest.js\n// module id = 0\n// module chunks = 0","const Territory = require(\"./territory\");\nconst Player = require(\"./player\");\n\nconst SPRITE_DATA = {\n  \"Blue\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      stand:8,\n      run:[1,3, \"run\"],\n    }\n  },\n  \"Red\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      stand:22,\n      run:[15,17, \"run\"],\n    }\n  },\n  \"Black\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      stand:358,\n      run:[351,353, \"run\"],\n    }\n  },\n};\n\nconst BASIC_MAP = {\n  1: new Territory(1, [2,7], 425, 173.2, 4, \"Red\", \"Base\"),\n  2: new Territory(2, [1,3,7], 350, 216.5, 0, \"Bisque\"),\n  3: new Territory(3, [2,4], 350, 303.1, 0, \"Bisque\"),\n  4: new Territory(4, [3,5], 425, 346.4, 0, \"Bisque\"),\n  5: new Territory(5, [4,6], 425, 433, 0, \"Bisque\"),\n  6: new Territory(6, [5,10], 425, 519.6, 3, \"Blue\", \"Base\"),\n  7: new Territory(7, [1,2,8], 350, 129.9, 0, \"Bisque\"),\n  8: new Territory(8, [7,9], 275, 86.6, 0, \"Bisque\"),\n  9: new Territory(9, [8], 200, 129.9, 0, \"Bisque\", \"Fort\"),\n  10: new Territory(10, [6,11], 350, 562.9, 0, \"Bisque\"),\n  11: new Territory(11, [10,12], 275, 519.6, 0, \"Bisque\"),\n  12: new Territory(12, [11], 200, 476.3, 0, \"Bisque\", \"Fort\"),\n};\n\nconst MAP = {\n  1: new Territory(1, [2,14,15], 425, 173.2, 4, \"Red\", \"Base\"),\n  2: new Territory(2, [1,3,15], 350, 216.5, 0, \"Bisque\"),\n  3: new Territory(3, [2,4,22], 350, 303.1, 0, \"Bisque\"),\n  4: new Territory(4, [3,5,7], 425, 346.4, 0, \"Bisque\"),\n  5: new Territory(5, [4,6], 425, 433, 0, \"Bisque\"),\n  6: new Territory(6, [5,28], 425, 519.6, 3, \"Blue\", \"Base\"),\n  7: new Territory(7, [4,8,9], 500, 303.1, 0, \"Bisque\"),\n  8: new Territory(8, [7,9,10,11], 575, 259.8, 0, \"Bisque\"),\n  9: new Territory(9, [7,8,10], 575, 346.4, 0, \"Bisque\"),\n  10: new Territory(10, [8,9,11,30], 650, 303.1, 3, \"Black\", \"Fort\"),\n  11: new Territory(11, [8,10,12], 650, 216.5, 0, \"Bisque\"),\n  12: new Territory(12, [11,13], 650, 129.9, 3, \"Black\"),\n  13: new Territory(13, [12,14], 575, 86.6, 0, \"Bisque\"),\n  14: new Territory(14, [1,13], 500, 129.9, 0, \"Bisque\"),\n  15: new Territory(15, [1,2,16], 350, 129.9, 0, \"Bisque\"),\n  16: new Territory(16, [15,17], 275, 86.6, 0, \"Bisque\"),\n  17: new Territory(17, [16,18,19], 200, 129.9, 0, \"Bisque\", \"Fort\"),\n  18: new Territory(18, [17,19], 125, 86.6, 0, \"Bisque\"),\n  19: new Territory(19, [17,18,20], 125, 173.2, 0, \"Bisque\"),\n  20: new Territory(20, [19,21,23], 125, 259.8, 0, \"Bisque\"),\n  21: new Territory(21, [20,22,23], 200, 303.1, 0, \"Bisque\"),\n  22: new Territory(22, [3,21], 275, 346.4, 0, \"Bisque\"),\n  23: new Territory(23, [20,21,24], 125, 346.4, 0, \"Bisque\"),\n  24: new Territory(24, [23,25,29], 125, 433, 0, \"Bisque\"),\n  25: new Territory(25, [24,26,29], 125, 519.6, 0, \"Bisque\"),\n  26: new Territory(26, [25,27,29], 200, 562.9, 0, \"Bisque\"),\n  27: new Territory(27, [26,28,29], 275, 519.6, 0, \"Bisque\"),\n  28: new Territory(28, [6,27], 350, 562.9, 0, \"Bisque\"),\n  29: new Territory(29, [24,25,26,27], 200, 476.3, 0, \"Bisque\", \"Fort\"),\n  30: new Territory(30, [10,31], 725, 346.4, 0, \"Bisque\"),\n  31: new Territory(31, [30], 725, 433, 0, \"Bisque\", \"Stronghold\"),\n};\n\nconst TUTORIAL_DIALOG = {\n  1: \"Hi, Welcome to Chance Quest. You are in control of BLUE kingdom.\" +\n     \" Lets begin by selecting a tile containing your units.\",\n  2: \"Very good! As you can see your units are on the march. You can\" +\n     \" now select a tile adjacent to the current tile. For now choose the\" +\n     \" lower left adjacent tile.\",\n  3: \"Nice Job! As you can see you will automatically move all but one of\" +\n     \" your units to the new tile. For that reason you can only choose tiles\" +\n     \" that contain more than one unit when moving. Go ahead and make another move.\",\n  4: \"Good! As per usual pick an adjacent tile\",\n  5: \"Now you have run out of valid moves. Only thing to do left is to end your\" +\n     \" turn. Click the End turn button to the right.\",\n  6: \"When you end your turn, you will automatically recruit units for your main base.\" +\n     \" You will always get at least one unit.\" +\n     \" You will also get one more for every three of your territories. Click\" +\n     \" OK then any tile to continue.\",\n  7: \"It is now red's turn. Wait until he finishes his moves.\",\n  8: \"All done! Red has taken over a territory with a circle in it. These special\" +\n     \" tiles represent forts. In addtion to adding to your territory count,\" +\n     \" forts will recruit an additional unit at the location upon ending the turn.\" +\n     \" Click End Turn again to continue.\",\n  9: \"It's probably a good idea for you to take a fort also. Lets start by selecting\" +\n     \" a tile.\",\n  10: \"It is possible to move units from one of your territories to another. Remember\" +\n      \" that you always leave one unit behind when you do this. However, our goal is\" +\n      \" to take a fort. Go ahead and click the tile with the circle.\",\n  11: \"You were able to move directly from your base to the fort because there is a\" +\n      \" direct path of controlled territories to and from the two locations. Let's see\" +\n      \" it in action again. Make another move.\",\n  12: \"Use the direct pathing to move to the tile above your base\",\n  13: \"Once again you are out of moves. Click end turn just like before.\",\n  14: \"This time red has enough units to attack you. Be prepared. Click any tile when you are ready\",\n  15: \"Red is making his move...\",\n  16: \"Red has attacked your territory. When battle is initiated, both teams roll dice \" +\n      \"based on how many units are in the battle. Higher roll win with tie going to \" +\n      \"defender.\",\n  101: \"Not quite. Remember you are controling BLUE.\",\n  102: \"No! You need to choose an ADJACENT tile.\",\n  103: \"Nice Try! Normally this would be a valid move; but for this case,\" +\n       \" please pick the OTHER ADJACENT tile.\",\n  104: \"Please choose a BLUE tile with MORE THAN ONE unit.\",\n  105: \"We are looking for a empty fort, a BEIGE tile with a CIRCLE in it.\",\n  106: \"Click the tile above your base.\",\n};\n\nconst AI_MOVES = [\n  [1,15,16,17,1],\n  [1,2,3,4,5,6],\n  [1,14,13,12,11,10,1],\n  [1,2,3,4,7,8,9,10,1],\n  [1,2,3,22,21,23,24,29,1],\n  [1,15,16,17,18,19,20,23,24,25,29,26,27,28,6]\n];\n\nclass Map {\n  constructor(sandbox, mapStage, tutorialMode, computerOn) {\n    this.sandbox = sandbox;\n    this.mapStage = mapStage;\n    this.tutorialMode = tutorialMode;\n    this.computerOn = computerOn;\n\n    if(computerOn) {\n      this.aIIndex = 0;\n    }\n\n    if(this.tutorialMode) {\n      this.board = BASIC_MAP;\n      this.showTutorialDialog(this.tutorialMode);\n      const cloud = document.getElementById(\"cloud\");\n      cloud.classList.remove(\"close\");\n    } else {\n      this.board = MAP;\n    }\n\n    this.players = {\n      \"Blue\": new Player(1, \"Blue\", this.board[6], 100, 175),\n      \"Red\": new Player(2, \"Red\", this.board[1], 100, 225),\n    };\n    this.currentPlayer = this.players[\"Blue\"];\n\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickTutorial = this.handleClickTutorial.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleTick = this.handleTick.bind(this);\n\n    this.selected = 0;\n    this.mapTerritories();\n  }\n\n  alert(string, callback) {\n    const close = document.getElementById(\"dialog-close\");\n    const newClose = close.cloneNode(true);\n    close.parentNode.replaceChild(newClose, close);\n\n    newClose.addEventListener(\"click\", () => {\n      const alert = document.getElementById(\"alert\");\n      alert.classList.add(\"close\");\n\n      if(callback) {\n        callback();\n      }\n    });\n\n    const contentDiv = document.getElementById(\"dialog-content\");\n    contentDiv.textContent = string;\n    const alert = document.getElementById(\"alert\");\n    alert.classList.remove(\"close\");\n\n  }\n\n  handleClick(e) {\n    console.log(e.currentTarget.id);\n    if (this.computerOn && this.currentPlayer === this.players[\"Red\"]) {\n      return;\n    }\n\n    if(this.selected) {\n      if (this.selected === e.currentTarget.id) {\n        this.deSelect();\n        return;\n      }\n\n      if (!this.hasPath(\n        this.board[this.selected],\n        this.board[e.currentTarget.id]\n      )) {\n        this.alert(\"Please choose a tile that's adjacent or you have a direct path to.\");\n        return;\n      }\n\n      const victory = this.board[this.selected].move(\n        this.board[e.currentTarget.id],\n        this.players, this.sandbox\n      );\n\n      if(victory) {\n        this.alert(victory);\n      }\n\n      this.deSelect();\n    } else {\n      if (this.currentPlayer.color !== this.board[e.currentTarget.id].color) {\n        this.alert(\"Please select your own units to move\");\n        return;\n      }\n      if (this.board[e.currentTarget.id].units === 1) {\n        this.alert(\"You need more than one unit to move\");\n        return;\n      }\n      this.selected = e.currentTarget.id;\n      this.board[e.currentTarget.id].spriteArr.forEach((sprite) => {\n        sprite.gotoAndPlay(\"run\");\n      });\n    }\n  }\n\n  handleMouseOver(e) {\n    if(e.currentTarget.alpha !== 0.7) {\n      e.currentTarget.alpha = 0.7;\n    }\n  }\n\n  handleMouseOut(e) {\n    if(this.selected !== e.currentTarget.id && e.currentTarget.alpha !== 0.3) {\n      e.currentTarget.alpha = 0.3;\n    }\n  }\n\n  swapPlayer() {\n    this.currentPlayer = (this.currentPlayer.color === \"Blue\")\n    ?\n    this.players[\"Red\"]\n    :\n    this.players[\"Blue\"];\n  }\n\n  deSelect() {\n    if(this.selected) {\n      this.board[this.selected].hexagon.alpha = 0.3;\n      this.board[this.selected].spriteArr.forEach((sprite) => {\n        sprite.gotoAndStop(\"stand\");\n      });\n      this.selected = 0;\n    }\n  }\n\n  hasPath(from, to, visited = []) {\n    if(from.isAdjacent(to)) {\n      return true;\n    }\n    const possiblePath = [];\n    from.adjacent.forEach((adjacentId) => {\n      if(!visited.includes(adjacentId) &&\n        from.isFriendly(this.board[adjacentId])) {\n        possiblePath.push(this.board[adjacentId]);\n      }\n    });\n\n    visited.push(from.id);\n\n    if (possiblePath.length === 0) {\n      return false;\n    }\n\n    for (var i = 0; i < possiblePath.length; i++) {\n      if (this.hasPath(possiblePath[i], to, visited)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  handleClickTutorial(e) {\n    console.log(e.currentTarget.id);\n    if (this.tutorialMode === 1) {\n      if (e.currentTarget.id === 6) {\n        this.selected = e.currentTarget.id;\n        this.board[e.currentTarget.id].spriteArr.forEach((sprite) => {\n          sprite.gotoAndPlay(\"run\");\n        });\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(101);\n      }\n    } else if (this.tutorialMode === 2) {\n      if (e.currentTarget.id === 10) {\n        this.board[this.selected].move(\n          this.board[e.currentTarget.id],\n          this.players, this.sandbox\n        );\n        this.deSelect();\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else if (e.currentTarget.id === 5) {\n        this.showTutorialDialog(103)\n      } else {\n        this.showTutorialDialog(102);\n      }\n    } else if (this.tutorialMode === 3) {\n      if (e.currentTarget.id === 10) {\n        this.selected = e.currentTarget.id;\n        this.board[e.currentTarget.id].spriteArr.forEach((sprite) => {\n          sprite.gotoAndPlay(\"run\");\n        });\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(104);\n      }\n    } else if (this.tutorialMode === 4) {\n      if (e.currentTarget.id === 11) {\n        this.board[this.selected].move(\n          this.board[e.currentTarget.id],\n          this.players, this.sandbox\n        );\n        this.deSelect();\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(102);\n      }\n    } else if (this.tutorialMode === 6) {\n      this.tutorialMode++;\n      this.showTutorialDialog(this.tutorialMode);\n      setTimeout(() => {\n        this.board[1].move(\n          this.board[7],\n          this.players, this.sandbox\n        );\n      }, 500);\n      setTimeout(() => {\n        this.board[7].move(\n          this.board[8],\n          this.players, this.sandbox\n        );\n      }, 1000);\n      setTimeout(() => {\n        this.board[8].move(\n          this.board[9],\n          this.players, this.sandbox\n        );\n      }, 1500);\n      setTimeout(() => {\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      }, 2000);\n    } else if (this.tutorialMode === 9) {\n      if (e.currentTarget.id === 6) {\n        this.selected = e.currentTarget.id;\n        this.board[e.currentTarget.id].spriteArr.forEach((sprite) => {\n        sprite.gotoAndPlay(\"run\");\n      });\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(104);\n      }\n    } else if (this.tutorialMode === 10) {\n      if (e.currentTarget.id === 12) {\n        this.board[this.selected].move(\n          this.board[e.currentTarget.id],\n          this.players, this.sandbox\n        );\n      this.deSelect();\n      this.tutorialMode++;\n      this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(105);\n      }\n    } else if (this.tutorialMode === 11) {\n      if (e.currentTarget.id === 12) {\n        this.selected = e.currentTarget.id;\n        this.board[e.currentTarget.id].spriteArr.forEach((sprite) => {\n        sprite.gotoAndPlay(\"run\");\n      });\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(104);\n      }\n    } else if (this.tutorialMode === 12) {\n      if (e.currentTarget.id === 5) {\n        this.board[this.selected].move(\n          this.board[e.currentTarget.id],\n          this.players, this.sandbox\n        );\n      this.deSelect();\n      this.tutorialMode++;\n      this.showTutorialDialog(this.tutorialMode);\n      } else {\n        this.showTutorialDialog(106);\n      }\n    } else if (this.tutorialMode === 14) {\n      this.tutorialMode++;\n      this.showTutorialDialog(this.tutorialMode);\n      setTimeout(() => {\n        this.board[9].move(\n          this.board[1],\n          this.players, this.sandbox\n        );\n      }, 500);\n      setTimeout(() => {\n        this.board[1].move(\n          this.board[2],\n          this.players, this.sandbox\n        );\n      }, 1000);\n      setTimeout(() => {\n        this.board[2].move(\n          this.board[3],\n          this.players, this.sandbox\n        );\n      }, 1500);\n      setTimeout(() => {\n        this.board[3].move(\n          this.board[4],\n          this.players, this.sandbox\n        );\n      }, 2000);\n      setTimeout(() => {\n        this.board[4].move(\n          this.board[5],\n          this.players, this.sandbox\n        );\n      }, 2500);\n      setTimeout(() => {\n        this.tutorialMode++;\n        this.showTutorialDialog(this.tutorialMode);\n      }, 3000);\n    }\n  }\n\n  showTutorialDialog(step) {\n    const contentDiv = document.getElementById(\"tutorial-dialog-content\");\n    contentDiv.textContent = TUTORIAL_DIALOG[step];\n  }\n\n  playComputerTurn() {\n    const moveArray = AI_MOVES[this.aIIndex];\n    let delay = 1000;\n\n    for (var i = 0; i < (moveArray.length - 1); i++) {\n      const from = moveArray[i];\n      const to = moveArray[i+1];\n\n      setTimeout(() => {\n        if(this.board[from].color === \"Red\" && this.board[from].units > 1) {\n          const victory = this.board[from].move(\n            this.board[to],\n            this.players, this.sandbox, true\n          );\n\n          if(victory) {\n            this.alert(victory);\n          }\n        }\n      }, delay);\n\n      delay += 500;\n    }\n\n    this.aIIndex = Math.floor(Math.random() * AI_MOVES.length);\n\n    return delay\n  }\n\n  //mapTerritories takes the data from board and creates the graphical elements\n  mapTerritories() {\n    const allTerritories = Object.values(this.board);\n\n    allTerritories.forEach((territory) => {\n\n      //draws the hexagon for each tile\n      const hexagon = this.generateHexagon(territory);\n      territory.setHexagon(hexagon);\n      this.mapStage.addChild(hexagon);\n\n      //draws the number representing the unit count\n      const text = this.generateText(territory);\n      this.mapStage.addChild(text);\n\n      //draws all the starting sprites on the tiles\n      const spriteArr = [];\n      let i = territory.units;\n      while (i > 0) {\n        const sprite = this.generateSprite(territory);\n\n        spriteArr.push(sprite);\n        this.mapStage.addChild(sprite)\n        i--;\n      }\n\n      territory.spriteArr = spriteArr;\n    });\n  }\n\n  generateHexagon(territory) {\n    const hexagon = new createjs.Shape();\n    hexagon.graphics.beginStroke(\"Black\")\n    .beginFill(territory.background)\n    .drawPolyStar(territory.x, territory.y, 50, 6, 0, 0);\n\n    //draws the circle or star for forts and bases\n    if (territory.base === \"Base\") {\n      hexagon.graphics.endFill()\n      .beginStroke(\"Black\")\n      .drawPolyStar(territory.x, territory.y, 50, 6, 0.5, 0);\n    } else if (territory.base === \"Fort\") {\n      hexagon.graphics.endFill()\n      .beginStroke(\"Black\")\n      .drawCircle(territory.x, territory.y, 25);\n    }\n\n    hexagon.cursor = \"pointer\";\n    hexagon.alpha = 0.3;\n    hexagon.id = territory.id;\n    hexagon.on(\"mouseover\", this.handleMouseOver);\n    hexagon.on(\"mouseout\", this.handleMouseOut);\n\n    if(this.tutorialMode) {\n      hexagon.on(\"click\", this.handleClickTutorial);\n    } else {\n      hexagon.on(\"click\", this.handleClick);\n    }\n    return hexagon;\n  }\n\n  generateText(territory) {\n    const text = new createjs.Text(\n      territory.units.toString(),\n      \"20px Arial\",\n      territory.color);\n    text.x = territory.x;\n    text.y = territory.y;\n    text.textAlign = \"center\";\n    text.textBaseline = \"middle\";\n    territory.setText(text);\n    if(text.text === \"0\") {\n      text.visible = false;\n    }\n\n    return text;\n  }\n\n  generateSprite(territory) {\n    const data = SPRITE_DATA[territory.color];\n    const spriteSheet = new createjs.SpriteSheet(data);\n    const sprite = new createjs.Sprite(spriteSheet, \"stand\");\n    sprite.x = (Math.random() * -30) + territory.x;\n    sprite.y = (Math.random() * -60) + territory.y;\n\n    return sprite;\n  }\n\n  //Sorts the elements so that sprites appear on top in order of y coord before rendering\n  handleTick() {\n    this.mapStage.sortChildren((child1, child2) => {\n      if (child1.y > child2.y) { return 1; }\n      if (child1.y < child2.y) { return -1; }\n      return 0;\n    })\n    this.mapStage.update();\n  }\n\n  // This method will add sprites to existing tiles when units are recruited\n  addSprites() {\n    const base = this.currentPlayer.base;\n    const color = this.currentPlayer.color;\n\n    while (base.spriteArr.length < base.units) {\n      const sprite = this.generateSprite(base)\n\n      base.spriteArr.push(sprite);\n      this.mapStage.addChild(sprite);\n    }\n\n    Object.values(this.currentPlayer.forts).forEach((fort) => {\n      const sprite = this.generateSprite(fort);\n\n      fort.spriteArr.push(sprite);\n      this.mapStage.addChild(sprite);\n    });\n  }\n}\n\nmodule.exports = Map;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/map.js\n// module id = 1\n// module chunks = 0","const COLOR_MAP = {\n  \"Blue\": \"DeepSkyBlue\",\n  \"Red\": \"LightCoral\",\n  \"Bisque\": \"Bisque\",\n  \"Black\": \"DimGray\",\n};\n\nclass Territory {\n  constructor(id, adjacent, x, y, units, color, base = \"\") {\n    this.id = id;\n    this.adjacent = adjacent;\n    this.x = x;\n    this.y = y;\n    this.units = units;\n    this.base = base;\n    this.setColor(color);\n  }\n\n\n  isAdjacent(territory) {\n    return this.adjacent.includes(territory.id);\n  }\n\n  isFriendly(territory) {\n    return this.color === territory.color;\n  }\n\n  setHexagon(hexagon) {\n    this.hexagon = hexagon;\n  }\n\n  setColor(color) {\n    this.color = color;\n    this.background = COLOR_MAP[color];\n  }\n\n  setText(text) {\n    this.text = text;\n  }\n\n  moveOut() {\n    this.units = 1;\n    this.text.text = this.units.toString();\n  }\n\n  moveIn(color, units) {\n    this.setColor(color);\n    this.hexagon.graphics.clear()\n      .beginStroke(\"Black\")\n      .beginFill(this.background)\n      .drawPolyStar(this.x, this.y, 50, 6, 0, 0);\n\n    if(this.base === \"Base\") {\n      this.hexagon.graphics.endFill()\n        .beginStroke(\"Black\")\n        .drawPolyStar(this.x, this.y, 50, 6, 0.5, 0);\n    } else if (this.base === \"Fort\") {\n      this.hexagon.graphics.endFill()\n      .beginStroke(\"Black\")\n      .drawCircle(this.x, this.y, 25);\n    }\n\n    this.units = units;\n    if(!this.text.visible) {\n      this.text.visible = true;\n    }\n    this.text.text = this.units.toString();\n    this.text.color = this.color;\n  }\n\n  moveThrough(units) {\n    this.units = units;\n    this.text.text = this.units.toString();\n  }\n\n  battle(territory) {\n    const result = {\n      attacker: this.color,\n      defender: territory.color,\n      initialAttackers: this.units,\n      initialDefenders: territory.units,\n      log: [],\n      winner: \"\",\n      survivors: 0,\n    };\n\n    while(this.units > 0 && territory.units > 0) {\n      const battle = {};\n      battle.attackerRolls = this.roll(this.units, true, this.base);\n      battle.defenderRolls = territory.roll(territory.units, false, territory.base);\n\n      let compares = (\n        battle.attackerRolls.length > battle.defenderRolls.length\n        ?\n        battle.defenderRolls.length\n        :\n        battle.attackerRolls.length\n      );\n\n      for (var i = 0; i < compares; i++) {\n        if (battle.defenderRolls[i] < battle.attackerRolls[i]) {\n          territory.units--;\n        } else {\n          this.units--;\n        }\n      }\n\n      battle.attackerUnits = this.units;\n      battle.defenderUnits = territory.units;\n      result.log.push(battle);\n    }\n\n    if (this.units) {\n      result.winner = this.color;\n      result.survivors = this.units;\n      return result;\n    } else {\n      result.winner = territory.color;\n      result.survivors = territory.units;\n      return result;\n    }\n  }\n\n  roll(units, attacking, base) {\n    const rolls = [];\n    let times;\n    if (attacking && units > 2) {\n      times = 3;\n    } else if (units > 1) {\n      times = 2;\n    } else {\n      times = 1;\n    }\n\n    let boostHelper = times;\n    if(!attacking && base === \"Base\") {\n      times += 1;\n    }\n\n    for (var i = 0; i < times; i++) {\n      rolls.push(1 + Math.floor(Math.random() * 6));\n    }\n\n    if (rolls.length === 1) {\n      return rolls;\n    }\n\n    return rolls.sort((a, b) => (b - a)).slice(0, boostHelper);\n  }\n\n  moveSprites(territory) {\n    while(this.spriteArr.length > 1) {\n      const sprite = this.spriteArr.pop();\n\n      sprite.x = (Math.random() * -30) + territory.x;\n      sprite.y = (Math.random() * -60) + territory.y;\n      sprite.gotoAndStop(\"stand\");\n\n      territory.spriteArr.push(sprite);\n    }\n  }\n\n  updateSprites() {\n    while(this.spriteArr.length > this.units) {\n      const sprite = this.spriteArr.pop();\n      sprite.stage.removeChild(sprite);\n    }\n  }\n\n  removeSprites() {\n    while(this.spriteArr.length > 0) {\n      const sprite = this.spriteArr.pop();\n      sprite.stage.removeChild(sprite);\n    }\n  }\n\n  move(territory, players, sandbox, skipAnimation) {\n    if (territory.color === \"Bisque\") {\n      if(territory.base === \"Fort\") {\n        players[this.color].forts = Object.assign(\n          players[this.color].forts,\n          {\n            [territory.id]: territory,\n          }\n        );\n      }\n\n      players[this.color].territories++;\n      territory.moveIn(this.color, this.units - 1);\n      this.moveOut();\n      this.moveSprites(territory);\n    } else if (territory.color === this.color) {\n      territory.moveThrough((this.units - 1 + territory.units));\n      this.moveOut();\n      this.moveSprites(territory);\n    } else if (territory.color === \"Black\") {\n      this.units--;\n      const outcome = this.battle(territory);\n\n      if(!skipAnimation) {\n        sandbox.animateBattle(outcome);\n      }\n\n      if (outcome.winner === this.color) {\n        if(territory.base === \"Fort\") {\n          players[this.color].forts = Object.assign(\n            players[this.color].forts,\n            {\n              [territory.id]: territory,\n            }\n          );\n        }\n\n        players[this.color].territories++;\n        territory.moveIn(this.color, outcome.survivors);\n        territory.removeSprites();\n        this.moveSprites(territory);\n        territory.updateSprites();\n      } else {\n        territory.moveThrough(outcome.survivors);\n        territory.updateSprites();\n      }\n      this.moveOut();\n      this.updateSprites();\n    } else {\n      this.units--;\n      const outcome = this.battle(territory);\n\n      if(!skipAnimation) {\n        sandbox.animateBattle(outcome);\n      }\n      \n      let victory;\n      if (outcome.winner === this.color) {\n        if(players[territory.color].base.id === territory.id) {\n          victory = `${this.color} Wins!`;\n        }\n\n        if(territory.base === \"Fort\") {\n          players[this.color].forts = Object.assign(\n            players[this.color].forts,\n            {\n              [territory.id]: territory,\n            }\n          );\n          delete players[territory.color].forts[territory.id];\n        }\n\n        players[this.color].territories++;\n        players[territory.color].territories--;\n        territory.moveIn(this.color, outcome.survivors);\n        territory.removeSprites();\n        this.moveSprites(territory);\n        territory.updateSprites();\n      } else {\n        territory.moveThrough(outcome.survivors);\n        territory.updateSprites();\n      }\n      this.moveOut();\n      this.updateSprites();\n      return victory;\n    }\n  }\n}\n\nmodule.exports = Territory;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/territory.js\n// module id = 2\n// module chunks = 0","class Player {\n  constructor(id, color, base, x, y) {\n    this.id = id;\n    this.color = color;\n    this.base = base;\n    this.territories = 1;\n    this.x = x;\n    this.y = y;\n    this.forts = {};\n  }\n\n  recruit() {\n    this.base.units += (1 + (Math.floor(this.territories / 3) + Object.keys(this.forts).length));\n    this.base.text.text = this.base.units.toString();\n    Object.values(this.forts).forEach((fort) => {\n      fort.units += 1;\n      fort.text.text = fort.units.toString();\n    });\n  }\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 3\n// module chunks = 0","class Game {\n  constructor(map, stage, tutorialMode, computerOn) {\n    this.map = map;\n    this.stage = stage;\n    this.tutorialMode = tutorialMode;\n    this.computerOn = computerOn;\n    this.endTurn = this.endTurn.bind(this);\n    this.handleTick = this.handleTick.bind(this);\n    this.handleTutorialClick = this.handleTutorialClick.bind(this);\n    this.mountTurnLabel();\n    this.mountEndButton();\n    this.mountMenuButton();\n    this.mountTerritoriesCount();\n  }\n\n  mountTurnLabel() {\n    const text = new createjs.Text(\n      \"Blue's Turn\",\n      \"32px cursive\",\n      \"Blue\");\n    text.x = 100;\n    text.y = 100;\n    text.textAlign = \"center\";\n    text.textBaseline = \"middle\";\n    this.turnLabel = text;\n    this.stage.addChild(text);\n  }\n\n  mountEndButton() {\n    const button = new createjs.Shape();\n    button.graphics.beginStroke(\"Black\")\n      .beginFill(\"beige\")\n      .drawRoundRect(25, 275, 150, 50, 5);\n    button.cursor = \"pointer\";\n    this.stage.addChild(button);\n    const text = new createjs.Text(\n      \"End Turn\",\n      \"32px cursive\",\n      \"Black\");\n    text.x = 100;\n    text.y = 300;\n    text.textAlign = \"center\";\n    text.textBaseline = \"middle\";\n\n    if(this.tutorialMode) {\n      button.on(\"click\", this.handleTutorialClick)\n    } else {\n      button.on(\"click\", () => {\n        if(this.computerOn && this.map.currentPlayer === this.map.players[\"Red\"]) {\n          return;\n        }\n\n        this.endTurn();\n      });\n    }\n    this.stage.addChild(text);\n  }\n\n  mountMenuButton() {\n    const button = new createjs.Shape();\n    button.graphics.beginStroke(\"Black\")\n      .beginFill(\"beige\")\n      .drawRoundRect(25, 350, 150, 50, 5);\n    button.cursor = \"pointer\";\n    this.stage.addChild(button);\n    const text = new createjs.Text(\n      \"Menu\",\n      \"32px cursive\",\n      \"Black\");\n    text.x = 100;\n    text.y = 375;\n    text.textAlign = \"center\";\n    text.textBaseline = \"middle\";\n    this.stage.addChild(text);\n  }\n\n  endTurn(skipAlert) {\n    this.map.currentPlayer.recruit();\n    const fortNum = Object.keys(this.map.currentPlayer.forts).length;\n    const recruitNum = (1 + (Math.floor(this.map.currentPlayer.territories / 3)) + fortNum);\n\n    if(!skipAlert) {\n      this.map.alert(`Congratulations, ${this.map.currentPlayer.color}.\n        You have recruited ${recruitNum} ${recruitNum === 1 ? 'unit' : 'units'}\n        for your base${fortNum ? ` and ${fortNum} ${fortNum === 1 ? 'unit'\n        : 'units'} for your forts` : ''}.`,\n        () => {\n          if (this.computerOn) {\n            this.playComputerTurn();\n          }\n        });\n    }\n\n    this.map.addSprites();\n    this.map.deSelect();\n    this.map.swapPlayer();\n    this.turnLabel.text = this.map.currentPlayer.color + \"'s Turn\";\n    this.turnLabel.color = this.map.currentPlayer.color;\n  }\n\n  mountTerritoriesCount() {\n    Object.values(this.map.players).forEach((player) => {\n      const text = new createjs.Text(\n        `${player.color}: ${player.territories} territories`,\n        \"20px cursive\",\n        \"black\");\n      text.x = player.x;\n      text.y = player.y;\n      text.textAlign = \"center\";\n      text.textBaseline = \"middle\";\n      player.text = text;\n      this.stage.addChild(text);\n    });\n  }\n\n  handleTutorialClick(e) {\n    if(this.map.tutorialMode === 5 || this.map.tutorialMode === 13) {\n      this.endTurn();\n      this.map.tutorialMode++;\n      this.map.showTutorialDialog(this.map.tutorialMode);\n    } else if (this.map.tutorialMode === 8) {\n      this.endTurn(true);\n      this.map.tutorialMode++;\n      this.map.showTutorialDialog(this.map.tutorialMode);\n    }\n  }\n\n  handleTick(e) {\n    Object.values(this.map.players).forEach((player) => {\n      player.text.text = `${player.color}: ${player.territories} territories`;\n    });\n    this.stage.update();\n  }\n\n  playComputerTurn() {\n    const delay = this.map.playComputerTurn();\n    setTimeout(() => {\n      this.endTurn(true);\n    }, delay + 500);\n  }\n}\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 4\n// module chunks = 0","const UNIT_SPRITE_DATA = {\n  \"Blue\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      defdead:215,\n      attdead:214,\n      attfight:252,\n      deffight:256,\n    }\n  },\n  \"Red\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      defdead:229,\n      attdead:228,\n      attfight:266,\n      deffight:270,\n    }\n  },\n  \"Black\": {\n    images: [\"./assets/images/soldier.png\"],\n    frames: {width:24.57, height:40},\n    animations: {\n      defdead:565,\n      attdead:564,\n      attfight:602,\n      deffight:606,\n    }\n  },\n};\n\nconst DICE_SPRITE_DATA = {\n  \"Blue\": {\n    images: [\"./assets/images/dice.jpg\"],\n    frames: {width:62.83, height:62.83},\n    animations: {\n      one: 18,\n      two: 19,\n      three: 20,\n      four: 21,\n      five: 22,\n      six: 23,\n      rolling: [18,23,\"rolling\"],\n    }\n  },\n  \"Red\": {\n    images: [\"./assets/images/dice.jpg\"],\n    frames: {width:62.83, height:62.83},\n    animations: {\n      one: 0,\n      two: 1,\n      three: 2,\n      four: 3,\n      five: 4,\n      six: 5,\n      rolling: [0,5,\"rolling\"],\n    }\n  },\n  \"Black\": {\n    images: [\"./assets/images/dice.jpg\"],\n    frames: {width:62.83, height:62.83},\n    animations: {\n      one: 24,\n      two: 25,\n      three: 26,\n      four: 27,\n      five: 28,\n      six: 29,\n      rolling: [24,29,\"rolling\"],\n    }\n  },\n};\n\nconst NUMBER_TO_STRING = {\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n};\n\nclass Sandbox {\n  constructor(sandboxStage) {\n    this.sandboxStage = sandboxStage;\n    this.bindNext();\n    this.handleTick = this.handleTick.bind(this);\n    this.next = this.next.bind(this);\n  }\n\n  handleTick() {\n    this.sandboxStage.sortChildren((child1, child2) => {\n      if (child1.y > child2.y) { return 1; }\n      if (child1.y < child2.y) { return -1; }\n      return 0;\n    })\n    this.sandboxStage.update();\n  }\n\n  bindNext() {\n    const next = document.getElementById(\"sandbox-next\");\n    next.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  next() {\n    if(this.index >= this.battle.log.length) {\n      const close = document.getElementById(\"sandbox\");\n      close.classList.add(\"close\");\n      return;\n    }\n\n    this.index++;\n    this.displayBattle(this.battle, this.index);\n  }\n\n  logBattle(battle, index) {\n    const text = document.getElementById(\"sandbox-text\");\n    text.innerHTML = \"\";\n\n    if (index >= battle.log.length) {\n      text.append(`${battle.winner} wins with ${battle.survivors}\n        ${battle.survivors === 1 ? 'unit' : 'units'} remaining`);\n\n      return;\n    }\n\n    const roll = battle.log[index];\n\n    let br = document.createElement('br');\n    text.append(`${battle.attacker} rolls ${roll.attackerRolls.join(', ')}`, br);\n    br = document.createElement('br');\n    text.append(`${battle.defender} rolls ${roll.defenderRolls.join(', ')}`, br);\n\n    let attackerLoss = 0;\n    let defenderLoss = 0;\n\n    for (var i = 0; i < 2; i++) {\n      if (!roll.attackerRolls[i] || !roll.defenderRolls[i]) {\n        break;\n      }\n\n      if (roll.attackerRolls[i] > roll.defenderRolls[i]) {\n        defenderLoss++;\n      } else {\n        attackerLoss++;\n      }\n    }\n\n    if(attackerLoss) {\n      br = document.createElement('br');\n      text.append(`${battle.attacker} loses ${attackerLoss}\n        ${attackerLoss === 1 ? 'unit' : 'units'}`, br);\n    }\n\n    if(defenderLoss) {\n      br = document.createElement('br');\n      text.append(`${battle.defender} loses ${defenderLoss}\n        ${defenderLoss === 1 ? 'unit' : 'units'}`, br);\n    }\n  }\n\n  mountDice(battle, index) {\n    this.sandboxStage.removeAllChildren();\n\n    if(index >= battle.log.length) {\n      return;\n    }\n\n    battle.log[index].attackerRolls.forEach((roll, idx) => {\n      const data = DICE_SPRITE_DATA[battle.attacker];\n      const spriteSheet = new createjs.SpriteSheet(data);\n      const animation = new createjs.Sprite(spriteSheet, NUMBER_TO_STRING[roll]);\n      animation.x = 63 * (idx);\n      animation.y = 0;\n      this.sandboxStage.addChild(animation);\n    });\n\n    battle.log[index].defenderRolls.forEach((roll, idx) => {\n      const data = DICE_SPRITE_DATA[battle.defender];\n      const spriteSheet = new createjs.SpriteSheet(data);\n      const animation = new createjs.Sprite(spriteSheet, NUMBER_TO_STRING[roll]);\n      animation.x = 63 * (idx);\n      animation.y = 287;\n      this.sandboxStage.addChild(animation);\n    });\n  }\n\n  mountSprites(battle, index) {\n    if(index >= battle.log.length) {\n      for (var i = 0; i < battle.survivors; i++) {\n        let side, animation;\n        if(battle.winner === battle.attacker) {\n          side = \"attack\";\n          animation = \"attfight\";\n        } else {\n          side = \"defend\"\n          animation = \"deffight\";\n        }\n        this.generateSprite(battle.winner, side, animation)\n      }\n      return;\n    }\n\n    let attackerDead, defenderDead;\n    if (index === 0) {\n      attackerDead = battle.initialAttackers - battle.log[index].attackerUnits;\n      defenderDead = battle.initialDefenders - battle.log[index].defenderUnits;\n    } else {\n      attackerDead = battle.log[index -1].attackerUnits - battle.log[index].attackerUnits;\n      defenderDead = battle.log[index -1].defenderUnits - battle.log[index].defenderUnits;\n    }\n\n    let attackerAlive = battle.log[index].attackerUnits;\n    let defenderAlive = battle.log[index].defenderUnits;\n\n    while (attackerDead > 0) {\n      this.generateSprite(battle.attacker, \"attack\", \"attdead\");\n      attackerDead--;\n    }\n    while (defenderDead > 0) {\n      this.generateSprite(battle.defender, \"defend\", \"defdead\");\n      defenderDead--;\n    }\n    while (attackerAlive > 0) {\n      this.generateSprite(battle.attacker, \"attack\", \"attfight\");\n      attackerAlive--;\n    }\n    while (defenderAlive > 0) {\n      this.generateSprite(battle.defender, \"defend\", \"deffight\");\n      defenderAlive--;\n    }\n  }\n\n  generateSprite(color, side, animation) {\n    const data = UNIT_SPRITE_DATA[color];\n    const spriteSheet = new createjs.SpriteSheet(data);\n    const sprite = new createjs.Sprite(spriteSheet, animation);\n\n    if (side === \"attack\") {\n      sprite.scaleX = -1;\n      sprite.x = Math.random() * 100 + 125;\n      sprite.y = Math.random() * 25 + 125;\n    } else {\n      sprite.x = Math.random() * 100 + 200;\n      sprite.y = Math.random() * 25 + 175;\n    }\n\n    this.sandboxStage.addChild(sprite);\n  }\n\n  animateBattle(battle, callback) {\n    this.battle = battle;\n    this.index = 0;\n    this.displayBattle(battle, 0);\n    const sandbox = document.getElementById(\"sandbox\");\n    sandbox.classList.remove(\"close\");\n\n    const close = document.getElementById(\"sandbox-close\");\n    close.addEventListener(\"click\", () => {\n      const alert = document.getElementById(\"sandbox\");\n      alert.classList.add(\"close\");\n\n      if(callback) {\n        callback();\n      }\n    });\n  }\n\n  displayBattle(battle, index) {\n    this.mountDice(battle, index);\n    this.logBattle(battle, index);\n    this.mountSprites(battle, index);\n  }\n}\n\nmodule.exports = Sandbox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/sandbox.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}